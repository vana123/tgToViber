require("dotenv").config();
const { Telegraf } = require("telegraf");
const axios = require("axios");
const Database = require("better-sqlite3");

const db = new Database("bot.db");

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
db.prepare(
	`
  CREATE TABLE IF NOT EXISTS channels (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    viber_token TEXT,
    telegram_chat_id TEXT,
    is_active INTEGER DEFAULT 1,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  )
`
).run();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–Ω–Ω—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
bot.on("my_chat_member", async (ctx) => {
	if (ctx.myChatMember.new_chat_member.status === "administrator") {
		try {
			const chatInfo = await ctx.getChat();
			const message = `üì¢ –í–∏ –¥–æ–¥–∞–ª–∏ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª:
–ù–∞–∑–≤–∞: ${chatInfo.title}
–¢–∏–ø: ${chatInfo.type}
Chat ID: ${chatInfo.id}

–©–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/setup [viber_token] ${chatInfo.id}`;

			try {
				await ctx.telegram.sendMessage(ctx.from.id, message);
			} catch (error) {
				if (
					error.response &&
					error.response.description &&
					error.response.description.includes("bot was kicked")
				) {
					console.warn("–ë–æ—Ç –±—É–≤ –≤–∏–ª—É—á–µ–Ω–∏–π, –∞–ª–µ –¥–∞–Ω—ñ –ø—Ä–æ –∫–∞–Ω–∞–ª –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ.");
					await ctx.reply(message);
				} else {
					throw error;
				}
			}
		} catch (error) {
			console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–∞–Ω–∞–ª:", error);
		}
	}
});

// –ö–æ–º–∞–Ω–¥–∞ start ‚Äì —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
bot.command("start", (ctx) => {
	const instruction = `–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äì –±–æ—Ç –¥–ª—è –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ Telegram –∫–∞–Ω–∞–ª—ñ–≤ –¥–æ Viber –∫–∞–Ω–∞–ª—ñ–≤.
  
–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
‚Ä¢ /setup <viber_token> <telegram_chat_id> ‚Äì –¥–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è (–≤–∫–∞–∂—ñ—Ç—å Viber —Ç–æ–∫–µ–Ω —ñ ID Telegram‚Äë–∫–∞–Ω–∞–ª—É).
   (–î—ñ–∑–Ω–∞—Ç–∏—Å—å <viber_token>: –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –≤ Viber, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ "Developer Tools" —ñ —Å–∫–æ–ø—ñ—é–π—Ç–µ —Ç–æ–∫–µ–Ω;
    <telegram_chat_id>: –¥–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ –≤ –∫–∞–Ω–∞–ª.)
‚Ä¢ /list ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤.
‚Ä¢ /pause <channel_id> ‚Äì –ø—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
‚Ä¢ /continue <channel_id> ‚Äì –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.
‚Ä¢ /delete <channel_id> ‚Äì –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.
‚Ä¢ /ping ‚Äì –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é.`;
	ctx.reply(instruction);
});

// –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
bot.command("setup", async (ctx) => {
	const args = ctx.message.text.split(" ").slice(1);
	if (args.length !== 2) {
		return ctx.reply(
			"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /setup <viber_token> <telegram_chat_id>"
		);
	}
	const [viberToken, telegramChatId] = args;
	try {
		await setViberWebhookForChannel(viberToken);
		// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ POST –∑–∞–ø–∏—Ç; –≤–∏–¥–∞–ª—è—î–º–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å params –∑ —Ç—ñ–ª–∞
		const viberCheck = await axios.post(
			"https://chatapi.viber.com/pa/get_account_info",
			{ auth_token: viberToken },
			{
				headers: {
					"Content-Type": "application/json",
					"X-Viber-Auth-Token": viberToken,
				},
			}
		);
		console.log("–û—Ç—Ä–∏–º–∞–Ω–æ get_account_info:", viberCheck.data);
		if (viberCheck.data.status !== 0) {
			return;
		}
		// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Telegram –∫–∞–Ω–∞–ª—É
		const chatMember = await ctx.telegram.getChatMember(
			telegramChatId,
			ctx.botInfo.id
		);
		if (chatMember.status !== "administrator") {
			return ctx.reply("‚ùå –ë–æ—Ç –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É!");
		}
		// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–∞–Ω–∞–ª –≤–∂–µ –¥–æ–¥–∞–Ω–∏–π
		const exists = db
			.prepare(
				`SELECT 1 FROM channels WHERE telegram_chat_id = ? AND user_id = ?`
			)
			.get(telegramChatId, ctx.from.id);
		if (exists) {
			return ctx.reply("‚ÑπÔ∏è –¶–µ–π –∫–∞–Ω–∞–ª –≤–∂–µ –¥–æ–¥–∞–Ω–∏–π!");
		}
		// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
		db.prepare(
			`
      INSERT INTO channels (user_id, viber_token, telegram_chat_id)
      VALUES (?, ?, ?)
    `
		).run(ctx.from.id, viberToken, telegramChatId);
		sendToAdmin(`–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –Ω–æ–≤–∏–π –∫–∞–Ω–∞–ª: ${telegramChatId}`);
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", error);
	}
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª—ñ–≤
bot.command("list", (ctx) => {
	const channels = db
		.prepare(
			`
      SELECT id, telegram_chat_id, viber_token, is_active 
      FROM channels 
      WHERE user_id = ?
    `
		)
		.all(ctx.from.id);
	if (!channels.length) {
		return ctx.reply("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤");
	}
	const list = channels
		.map(
			(ch) => `
ID: ${ch.id}
Telegram Chat ID: ${ch.telegram_chat_id}
Viber Token: ${ch.viber_token.slice(0, 6)}...
–°—Ç–∞—Ç—É—Å: ${ch.is_active ? "–∞–∫—Ç–∏–≤–Ω–∏–π ‚úÖ" : "–ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ ‚è∏"}`
		)
		.join("\n\n");
	logUser(ctx, "üìã –í–∞—à—ñ –∫–∞–Ω–∞–ª–∏:" + list);
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–∞—É–∑–∏
bot.command("pause", (ctx) => {
	const args = ctx.message.text.split(" ").slice(1);
	if (!args[0]) return ctx.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É: /pause <channel_id>");
	db.prepare(
		`
      UPDATE channels 
      SET is_active = 0 
      WHERE id = ? AND user_id = ?
    `
	).run(args[0], ctx.from.id);
});

// –ö–æ–º–∞–Ω–¥–∞ "continue" ‚Äì –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É
bot.command("continue", (ctx) => {
	const args = ctx.message.text.split(" ").slice(1);
	if (!args[0])
		return ctx.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É: /continue <channel_id>");
	db.prepare(
		`
      UPDATE channels 
      SET is_active = 1 
      WHERE id = ? AND user_id = ?
    `
	).run(args[0], ctx.from.id);
});

// –ö–æ–º–∞–Ω–¥–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
bot.command("delete", (ctx) => {
	const args = ctx.message.text.split(" ").slice(1);
	if (!args[0]) return ctx.reply("‚ùå –í–∫–∞–∂—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É: /delete <channel_id>");
	try {
		const info = db
			.prepare(
				`
        DELETE FROM channels 
        WHERE id = ? AND user_id = ?
      `
			)
			.run(args[0], ctx.from.id);
		if (info.changes === 0) {
			return ctx.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–∞–º!");
		}
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", error);
	}
});

function sendToAdmin(message) {
	bot.telegram.sendMessage(process.env.BOT_ADMIN_CHAT_ID, `${message}`);
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ—Å—Ç—ñ–≤ (–ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ Telegram –∫–∞–Ω–∞–ª—É –¥–æ Viber –∫–∞–Ω–∞–ª—É)
bot.on("channel_post", async (ctx) => {
	try {
		// –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–∞–Ω–∞–ª—É —Ä–∞–∑–æ–º —ñ–∑ user_id
		const channels = db
			.prepare(
				`
			SELECT user_id, viber_token 
			FROM channels 
			WHERE telegram_chat_id = ? 
			  AND is_active = 1
		  `
			)
			.all(ctx.chat.id.toString());
		if (!channels.length) return;

		// –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É (–∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
		for (const channel of channels) {
			try {
				// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
				if (ctx.channelPost.text) {
					await setViberWebhookForChannel(channel.viber_token);
					const adminId = await getChannelAdminId(channel.viber_token);
					const textWithLinks = addLinks(
						ctx.channelPost.text,
						ctx.channelPost.entities
					);
					await viberSendText(textWithLinks, channel.viber_token, adminId);
				}
				// –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
				if (ctx.channelPost.photo) {
					const photoArray = ctx.channelPost.photo;
					const caption = ctx.channelPost.caption
						? addLinks(
								ctx.channelPost.caption,
								ctx.channelPost.caption_entities
						  )
						: "";
					// –ë–µ—Ä–µ–º–æ –Ω–∞–π–∫—Ä–∞—â—É —è–∫—ñ—Å—Ç—å (–æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç)
					const bestPhoto = photoArray[photoArray.length - 1];
					const link = await bot.telegram.getFileLink(bestPhoto.file_id);
					await viberSendPicture(
						link,
						caption,
						channel.viber_token,
						await getChannelAdminId(channel.viber_token)
					);
				}
				// –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ
				if (ctx.channelPost.video) {
					const video = ctx.channelPost.video;
					const link = await bot.telegram.getFileLink(video.file_id);
					const caption = ctx.channelPost.caption
						? addLinks(
								ctx.channelPost.caption,
								ctx.channelPost.caption_entities
						  )
						: "";
					await viberSendVideo(
						link,
						caption,
						video.file_size,
						video.duration,
						channel.viber_token,
						await getChannelAdminId(channel.viber_token)
					);
				}
			} catch (error) {
				console.error(
					"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:",
					error.response?.data || error.message
				);
			}
		}
	} catch (error) {
		console.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å—Ç–∞:", error);
	}
});

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç –±–∞–π—Ç—ñ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç—É (–±–µ–∑–ø–µ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
const maxSafeBytes = 30000;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑–±–∏—Ç—Ç—è–º –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
function viberSendText(text, viberToken, adminId) {
	const SendMessageUrl = "https://chatapi.viber.com/pa/post";

	// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	function sendChunk(chunk) {
		const payload = {
			auth_token: viberToken,
			from: adminId,
			type: "text",
			text: chunk,
		};

		axios
			.post(SendMessageUrl, payload, {
				headers: {
					"Content-Type": "application/json",
					"X-Viber-Auth-Token": viberToken,
				},
			})
			.then((response) => {
				console.log(
					"–¢–µ–∫—Å—Ç–æ–≤–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–¥—å:",
					response.data
				);
			})
			.catch((error) => {
				console.error(
					"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É:",
					error.response?.data || error.message
				);
			});
	}

	// –Ø–∫—â–æ —Ä–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É —É –±–∞–π—Ç–∞—Ö –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç ‚Äì –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–¥—Ä–∞–∑—É
	if (Buffer.byteLength(text, "utf8") <= maxSafeBytes) {
		sendChunk(text);
		return;
	}

	// –Ü–Ω–∞–∫—à–µ —Ä–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
	let currentIndex = 0;
	while (currentIndex < text.length) {
		let low = currentIndex;
		let high = text.length;
		// –ë—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ—à—É–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –ø—ñ–¥—Å—Ç—Ä–æ–∫–∏ –≤—ñ–¥ currentIndex, —â–æ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î maxSafeBytes
		while (low < high) {
			const mid = Math.floor((low + high + 1) / 2);
			const substr = text.substring(currentIndex, mid);
			if (Buffer.byteLength(substr, "utf8") <= maxSafeBytes) {
				low = mid;
			} else {
				high = mid - 1;
			}
		}
		let chunk = text.substring(currentIndex, low);
		// –Ø–∫—â–æ –Ω–∞–≤—ñ—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç (–º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫)
		if (chunk.length === 0) {
			chunk = text[currentIndex];
			currentIndex++;
		} else {
			currentIndex += chunk.length;
		}
		sendChunk(chunk);
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —É Viber –∫–∞–Ω–∞–ª
function viberSendPicture(link, caption, viberToken, adminId) {
	const SendMessageUrl = "https://chatapi.viber.com/pa/post";
	// –Ø–∫—â–æ caption —ñ—Å–Ω—É—î —ñ –π–æ–≥–æ —Ä–æ–∑–º—ñ—Ä –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
	if (caption && Buffer.byteLength(caption, "utf8") > maxSafeBytes) {
		const payloadPicture = {
			auth_token: viberToken,
			from: adminId,
			type: "picture",
			text: "", // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
			media: link.toString(),
		};

		axios
			.post(SendMessageUrl, payloadPicture, {
				headers: {
					"Content-Type": "application/json",
					"X-Viber-Auth-Token": viberToken,
				},
			})
			.then((response) => {
				console.log("–§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É. –í—ñ–¥–ø–æ–≤—ñ–¥—å:", response.data);
				// –ù–∞–¥—Å–∏–ª–∞—î–º–æ caption –æ–∫—Ä–µ–º–æ, —Ä–æ–∑–±–∏—Ç–∏–π –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
				viberSendText(caption, viberToken, adminId);
			})
			.catch((error) => {
				console.error(
					"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ:",
					error.response?.data || error.message
				);
				sendToAdmin(
					"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ: " + (error.response?.data || error.message)
				);
			});
	} else {
		// –Ø–∫—â–æ caption —É –º–µ–∂–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ª—ñ–º—ñ—Ç—É, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ —Ä–∞–∑–æ–º —ñ–∑ –ø—ñ–¥–ø–∏—Å–æ–º
		const payloadPicture = {
			auth_token: viberToken,
			from: adminId,
			type: "picture",
			text: caption || "",
			media: link.toString(),
		};

		axios
			.post(SendMessageUrl, payloadPicture, {
				headers: {
					"Content-Type": "application/json",
					"X-Viber-Auth-Token": viberToken,
				},
			})
			.then((response) => {
				console.log("–§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–¥—å:", response.data);
			})
			.catch((error) => {
				console.error(
					"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ:",
					error.response?.data || error.message
				);
				sendToAdmin(
					"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ: " + (error.response?.data || error.message)
				);
			});
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–µ–æ —É Viber –∫–∞–Ω–∞–ª
function viberSendVideo(
	link,
	caption,
	fileSize,
	duration,
	viberToken,
	adminId
) {
	const SendMessageUrl = "https://chatapi.viber.com/pa/post";
	// –Ø–∫—â–æ caption —ñ—Å–Ω—É—î —ñ –π–æ–≥–æ —Ä–æ–∑–º—ñ—Ä –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–µ–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
	if (caption && Buffer.byteLength(caption, "utf8") > maxSafeBytes) {
		const payloadVideo = {
			auth_token: viberToken,
			from: adminId,
			type: "video",
			text: "", // –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–µ–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É
			media: link.toString(),
			size: fileSize,
			duration: duration,
		};

		axios
			.post(SendMessageUrl, payloadVideo, {
				headers: {
					"Content-Type": "application/json",
					"X-Viber-Auth-Token": viberToken,
				},
			})
			.then((response) => {
				console.log("–í—ñ–¥–µ–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É. –í—ñ–¥–ø–æ–≤—ñ–¥—å:", response.data);
				// –ù–∞–¥—Å–∏–ª–∞—î–º–æ caption –æ–∫—Ä–µ–º–æ, —Ä–æ–∑–±–∏—Ç–∏–π –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
				viberSendText(caption, viberToken, adminId);
			})
			.catch((error) => {
				console.error(
					"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–µ–æ:",
					error.response?.data || error.message
				);
				sendToAdmin(
					"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–µ–æ: " + (error.response?.data || error.message)
				);
			});
	} else {
		// –Ø–∫—â–æ caption —É –º–µ–∂–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ª—ñ–º—ñ—Ç—É –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–µ–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
		const payloadVideo = {
			auth_token: viberToken,
			from: adminId,
			type: "video",
			text: caption || "",
			media: link.toString(),
			size: fileSize,
			duration: duration,
		};

		axios
			.post(SendMessageUrl, payloadVideo, {
				headers: {
					"Content-Type": "application/json",
					"X-Viber-Auth-Token": viberToken,
				},
			})
			.then((response) => {
				console.log("–í—ñ–¥–µ–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –í—ñ–¥–ø–æ–≤—ñ–¥—å:", response.data);
			})
			.catch((error) => {
				console.error(
					"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–µ–æ:",
					error.response?.data || error.message
				);
				sendToAdmin(
					"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–µ–æ: " + (error.response?.data || error.message)
				);
			});
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å —É —Ç–µ–∫—Å—Ç
function addLinks(text, entities) {
	if (!entities || entities.length === 0) return text;
	entities.sort((a, b) => a.offset - b.offset);
	let result = "";
	let currentIndex = 0;
	for (const entity of entities) {
		result += text.substring(currentIndex, entity.offset);
		const entityText = text.substring(
			entity.offset,
			entity.offset + entity.length
		);
		if (entity.type === "text_link" && entity.url) {
			result += `${entityText} (${entity.url})`;
		} else if (entity.type === "url") {
			result += `<a href="${entityText}">${entityText}</a>`;
		} else {
			result += entityText;
		}
		currentIndex = entity.offset + entity.length;
	}
	result += text.substring(currentIndex);
	return result;
}

async function getChannelAdminId(authToken) {
	try {
		const response = await axios.post(
			"https://chatapi.viber.com/pa/get_account_info",
			{ auth_token: authToken },
			{
				headers: {
					"Content-Type": "application/json",
					"X-Viber-Auth-Token": authToken,
				},
			}
		);
		console.log("–û—Ç—Ä–∏–º–∞–Ω–æ get_account_info:", response.data);
		if (
			response.data.status === 0 &&
			response.data.members &&
			response.data.members.length > 0
		) {
			const admin =
				response.data.members.find((member) => member.role === "superadmin") ||
				response.data.members.find((member) => member.role === "admin");
			return admin ? admin.id : null;
		} else {
			console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª", response.data);
			return null;
		}
	} catch (error) {
		console.error(
			"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è get_account_info:",
			error.response?.data || error.message
		);
		return null;
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
async function setViberWebhookForChannel(viberToken) {
	const SetWebHookUrl = "https://chatapi.viber.com/pa/set_webhook";
	const SetWebData = {
		url: "https://webhook.site/b94ba94f-b294-4c7d-9cdd-5bd589f19bc7",
		auth_token: viberToken,
	};
	try {
		const response = await axios.post(SetWebHookUrl, SetWebData, {
			headers: {
				"Content-Type": "application/json",
				"X-Viber-Auth-Token": viberToken,
			},
		});
		if (response.data.status === 0) {
			console.log("Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞–Ω–∞–ª—É –∑ —Ç–æ–∫–µ–Ω–æ–º:", viberToken);
		} else {
			console.error("–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook:", response.data);
		}
	} catch (error) {
		console.error(
			"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook:",
			error.response?.data || error.message
		);
	}
}

bot.command("ping", async (ctx) => {
	await setViberWebhookForChannel(process.env.VIBER_AUTH_TOKEN);
	const adminId = await getChannelAdminId(process.env.VIBER_AUTH_TOKEN);
	await viberSendText("ping", process.env.VIBER_AUTH_TOKEN, adminId);
	ctx.reply("ping");
});

// –û–±—Ä–æ–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
bot.catch((err, ctx) => {
	console.error("–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", err);
	if (ctx && ctx.reply) {
		ctx.reply("üö® –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
	}
	sendToAdmin(`–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${err}`);
});

bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!");
